(window.webpackJsonp=window.webpackJsonp||[]).push([[276],{1335:function(t,a,r){"use strict";r.r(a);var n=r(4),s=Object(n.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"项目启动时执行特定逻辑"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#项目启动时执行特定逻辑"}},[t._v("#")]),t._v(" 项目启动时执行特定逻辑")]),t._v(" "),r("p",[t._v("[toc]")]),t._v(" "),r("h2",{attrs:{id:"推荐阅读"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#推荐阅读"}},[t._v("#")]),t._v(" 推荐阅读")]),t._v(" "),r("blockquote",[r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/qq_26878363/article/details/104500263",target:"_blank",rel:"noopener noreferrer"}},[t._v("SpringBoot - 启动时实现预加载自动执行代码"),r("OutboundLink")],1)])])]),t._v(" "),r("h2",{attrs:{id:"一、项目启动时执行特定逻辑"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#一、项目启动时执行特定逻辑"}},[t._v("#")]),t._v(" 一、项目启动时执行特定逻辑")]),t._v(" "),r("h3",{attrs:{id:"_1-java自身的启动时加载方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-java自身的启动时加载方式"}},[t._v("#")]),t._v(" 1. Java自身的启动时加载方式")]),t._v(" "),r("blockquote",[r("ul",[r("li",[t._v("static代码块： static静态代码块，在类加载的时候即自动执行")]),t._v(" "),r("li",[t._v("构造方法： 在对象初始化时执行。执行顺序在static静态代码块之后。")])])]),t._v(" "),r("h3",{attrs:{id:"_2-spring启动时加载方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-spring启动时加载方式"}},[t._v("#")]),t._v(" 2.Spring启动时加载方式")]),t._v(" "),r("blockquote",[r("ul",[r("li",[t._v("@PostConstruct： PostConstruct注解使用在方法上，这个方法在对象依赖注入初始化之后执行。")]),t._v(" "),r("li",[t._v("ApplicationRunner和CommandLineRunner： 在Spring容器启动完成后执行，这两个接口功能基本一致，其区别在于run方法的入参")])])]),t._v(" "),r("h3",{attrs:{id:"_3-总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-总结"}},[t._v("#")]),t._v(" 3.总结")]),t._v(" "),r("p",[t._v("Spring应用启动过程中，肯定是要自动扫描有@Component注解的类，加载类并初始化对象进行自动注入。")]),t._v(" "),r("p",[t._v("加载类时首先要执行static静态代码块中的代码，之后再初始化对象时会执行构造方法。")]),t._v(" "),r("p",[t._v("在对象注入完成后，调用带有@PostConstruct注解的方法。")]),t._v(" "),r("p",[t._v("当容器启动成功后，再根据@Order注解的顺序调用CommandLineRunner和ApplicationRunner接口类中的run方法。")]),t._v(" "),r("p",[t._v("因此，加载顺序为static>constructer>@PostConstruct>CommandLineRunner和ApplicationRunner.")])])}),[],!1,null,null,null);a.default=s.exports}}]);