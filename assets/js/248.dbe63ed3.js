(window.webpackJsonp=window.webpackJsonp||[]).push([[248],{1296:function(t,s,a){"use strict";a.r(s);var e=a(4),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#一、相关排查命令"}},[t._v("一、相关排查命令")])]),a("li",[a("a",{attrs:{href:"#二、排查过程"}},[t._v("二、排查过程")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-cpu-飚高"}},[t._v("1.CPU 飚高")])])])])])]),a("p"),t._v(" "),a("p",[t._v("[toc]")]),t._v(" "),a("h2",{attrs:{id:"一、相关排查命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、相关排查命令"}},[t._v("#")]),t._v(" 一、相关排查命令")]),t._v(" "),a("p",[t._v("参考："),a("a",{attrs:{href:"https://blog.csdn.net/u010827436/article/details/46564641",target:"_blank",rel:"noopener noreferrer"}},[t._v("线上问题排查命令----JVM 篇"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"二、排查过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、排查过程"}},[t._v("#")]),t._v(" 二、排查过程")]),t._v(" "),a("p",[t._v("参考：")]),t._v(" "),a("blockquote",[a("ul",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/stateis0/p/9062196.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("JVM 线上故障排查基本操作"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s/bflX-enjHXV2xLCX6J1qWw",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试官问：平时碰到系统 CPU 飙高和频繁 GC，你会怎么排查？"),a("OutboundLink")],1)])])]),t._v(" "),a("h3",{attrs:{id:"_1-cpu-飚高"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-cpu-飚高"}},[t._v("#")]),t._v(" 1.CPU 飚高")]),t._v(" "),a("p",[t._v("（1） 使用 "),a("code",[t._v("top")]),t._v("命令查看系统 CPU 的占用情况，找到 CPU 占用最高的进程，并记住进程 ID")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("（2） 使用"),a("code",[t._v("top -Hp [PID]")]),t._v("查看该进程的各个线程运行情况，找到 CPU 占用最高的线程， 并记住线程 ID")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("top")]),t._v(" -Hp "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("（3） 使用 JDK 提供的 jstack 工具 dump 线程堆栈信息到指定文件中")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("jstack -l "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("PID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("jstack.log\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("（4） 由于刚刚的线程 ID 是十进制的，而堆栈信息中的线程 ID 是 16 进制的，因此我们需要将 10 进制的转换成 16 进制的，并用这个线程 ID 在堆栈中查找。使用 "),a("code",[t._v('printf "%x\\n" [十进制数字]')]),t._v("，可以将 10 进制转换成 16 进制。")]),t._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("printf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%x'),a("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[t._v("\\n")]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("十进制数字"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("（5） 通过刚刚转换的 16 进制数字从堆栈信息里找到对应的线程堆栈，就可以从该堆栈中看出端倪。")]),t._v(" "),a("p",[t._v("（6）分析 dump，可使用 dump 文件的可视化工具进行分析，工具有： MAT，Jprofile，jvisualvm")])])}),[],!1,null,null,null);s.default=n.exports}}]);