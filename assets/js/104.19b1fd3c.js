(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{1082:function(_,t,v){_.exports=v.p+"assets/img/4.4ef054a4.jpg"},1083:function(_,t,v){_.exports=v.p+"assets/img/687474703a2f.25e6b284.png"},1476:function(_,t,v){"use strict";v.r(t);var a=v(4),r=Object(a.a)({},(function(){var _=this,t=_.$createElement,a=_._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[a("p",[_._v("[TOC]")]),_._v(" "),a("h1",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[_._v("#")]),_._v(" 前言")]),_._v(" "),a("p",[_._v("当进行海量数据操作时，若构建二叉树，则其高度很大，降低操作速度。这是如果能允许每个节点可以有更多的数据项和子节点，则能减少树的高度，能对二叉树进行优化。")]),_._v(" "),a("h1",{attrs:{id:"一、多路查找树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、多路查找树"}},[_._v("#")]),_._v(" 一、多路查找树")]),_._v(" "),a("h2",{attrs:{id:"_1-定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义"}},[_._v("#")]),_._v(" 1.定义")]),_._v(" "),a("p",[_._v("多叉树（mutiway tree）允许每个节点可以有更多的数据项和子节点.")]),_._v(" "),a("h2",{attrs:{id:"_2-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-分类"}},[_._v("#")]),_._v(" 2.分类")]),_._v(" "),a("p",[_._v("常见的多叉树有如下几类：")]),_._v(" "),a("blockquote",[a("ul",[a("li",[_._v("B 树")]),_._v(" "),a("li",[_._v("B+树")]),_._v(" "),a("li",[_._v("B*树")])])]),_._v(" "),a("h1",{attrs:{id:"二、b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、b-树"}},[_._v("#")]),_._v(" 二、B 树")]),_._v(" "),a("p",[_._v("B 树（B-tree，Balanced tree），是一种多路自平衡查找树。")]),_._v(" "),a("p",[_._v("我们描述一颗 B 树时需要指定它的阶数，阶数表示了一个结点最多有多少个孩子结点，一般用字母 m 表示阶数。当 m 取 2 时，就是我们常见的二叉搜索树。")]),_._v(" "),a("h2",{attrs:{id:"_1-定义-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义-2"}},[_._v("#")]),_._v(" 1.定义")]),_._v(" "),a("p",[_._v("一棵 m 阶的 B-树，或为空树，或为满足下列特性的 m 叉树：")]),_._v(" "),a("p",[_._v("（1）每一个节点最多有 m 个子节点，且 M>2；")]),_._v(" "),a("p",[_._v("（2）每一个非叶子节点（除根节点）最少有⌈m/2⌉个子节点")]),_._v(" "),a("p",[_._v("（3）若根节点不是叶子节点，则它至少有两个子节点")]),_._v(" "),a("p",[_._v("（4）所有的非终端结点中包含下列信息数据")]),_._v(" "),a("blockquote",[a("p",[_._v("(n, A~0~, K~1~, A~1~, K~2~, A~2~,..., K~n~, A~n~)")]),_._v(" "),a("ul",[a("li",[_._v("K~i~为关键字，且 K~i~ < K~i+1~")]),_._v(" "),a("li",[_._v("A~i~为指向子树根节点的指针，且指针 A~i-1~所指子树中所有结点的关键字均小于 K~i~")])])]),_._v(" "),a("p",[_._v("（5）所有的叶子结点都在同一层")]),_._v(" "),a("p",[a("img",{attrs:{src:v(1082),alt:"img"}})]),_._v(" "),a("blockquote",[a("p",[_._v("如图，根节点被分为 3 段：[0,17), (17,35), (35,∞)，也就对应其三个子节点的取值范围。")]),_._v(" "),a("p",[_._v("例如，查找关键字 10 的过程：")]),_._v(" "),a("p",[_._v("（1）10∈[0,17)")]),_._v(" "),a("p",[_._v("（2）10∈[8,12)")]),_._v(" "),a("p",[_._v("（3）10==10")])]),_._v(" "),a("h2",{attrs:{id:"_2-特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-特性"}},[_._v("#")]),_._v(" 2.特性")]),_._v(" "),a("p",[_._v("（1）关键字集合分布在整颗树中；")]),_._v(" "),a("p",[_._v("（2）任何一个关键字出现且只出现在一个结点中；")]),_._v(" "),a("p",[_._v("（3）搜索有可能在非叶子结点结束；")]),_._v(" "),a("p",[_._v("（4）其搜索性能等价于在关键字全集内做一次二分查找；")]),_._v(" "),a("h2",{attrs:{id:"_3-适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-适用场景"}},[_._v("#")]),_._v(" 3.适用场景")]),_._v(" "),a("p",[_._v("常被应用在数据库和文件系统的索引")]),_._v(" "),a("h2",{attrs:{id:"_4-操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-操作"}},[_._v("#")]),_._v(" 4.操作")]),_._v(" "),a("h2",{attrs:{id:"_5-2-3-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-3-树"}},[_._v("#")]),_._v(" 5.2-3 树")]),_._v(" "),a("h1",{attrs:{id:"三、b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、b-树"}},[_._v("#")]),_._v(" 三、B+树")]),_._v(" "),a("h2",{attrs:{id:"_1-定义-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-定义-3"}},[_._v("#")]),_._v(" 1.定义")]),_._v(" "),a("p",[_._v("B+树是 B 树的变体，也是一种多路搜索树，其定义基本与 B-树相同，除了：")]),_._v(" "),a("p",[_._v("（1）非叶子结点的子树指针与关键字个数相同；")]),_._v(" "),a("p",[_._v("（2）非叶子结点的子树指针 P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；")]),_._v(" "),a("p",[_._v("（3）所有关键字都在叶子结点出现；")]),_._v(" "),a("p",[_._v("（4）所有叶子结点均有一个链指针指向下一个叶子结点；")]),_._v(" "),a("p",[a("img",{attrs:{src:"687474703a2f2f696d.png",alt:"tu"}})]),_._v(" "),a("p",[_._v("B+树的搜索与 B 树也基本相同，区别是 B+树只有达到叶子结点才命中（B 树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；")]),_._v(" "),a("h2",{attrs:{id:"_2-b-树与b树的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-b-树与b树的区别"}},[_._v("#")]),_._v(" 2.B ＋树与Ｂ树的区别")]),_._v(" "),a("p",[_._v("（1）所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；")]),_._v(" "),a("p",[_._v("（2）不可能在非叶子结点命中；")]),_._v(" "),a("p",[_._v("（3）非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；")]),_._v(" "),a("p",[_._v("（4）更适合文件索引系统。")]),_._v(" "),a("p",[_._v("B+的搜索与 B-树也基本相同，区别是 B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；")]),_._v(" "),a("h2",{attrs:{id:"_3-适用场景-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-适用场景-2"}},[_._v("#")]),_._v(" 3.适用场景")]),_._v(" "),a("p",[_._v("B+ 树通常用于"),a("strong",[_._v("数据库和操作系统的文件系统")]),_._v("中。NTFS, ReiserFS, NSS, XFS, JFS, ReFS 和 BFS 等文件系统都在使用 B+树作为"),a("strong",[_._v("元数据索引")]),_._v("。B+ 树的特点是能够保持"),a("strong",[_._v("数据稳定有序")]),_._v("，其插入与修改拥有较稳定的对数时间复杂度。B+ 树元素自底向上插入。")]),_._v(" "),a("p",[_._v("B+树更适合用来做存储索引：")]),_._v(" "),a("blockquote",[a("ul",[a("li",[_._v("B+树的磁盘读写代价更低")]),_._v(" "),a("li",[_._v("B+树的查询效率更加稳定")]),_._v(" "),a("li",[_._v("B+树更有利于对数据库的扫描")])])]),_._v(" "),a("h1",{attrs:{id:"四、b-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、b-树"}},[_._v("#")]),_._v(" 四、"),a("code",[_._v("B*")]),_._v("树")]),_._v(" "),a("p",[_._v("B+树的变体，在 B+树的非根和非叶子结点再增加指向兄弟的指针；")]),_._v(" "),a("p",[a("img",{attrs:{src:v(1083),alt:"这里写图片描述"}})]),_._v(" "),a("p",[a("code",[_._v("B*")]),_._v(" 树定义了非叶子结点关键字个数至少为(2/3)*M，即块的最低使用率为 2/3（代替 B+树的 1/2）；")]),_._v(" "),a("p",[a("code",[_._v("B+")]),_._v("树的分裂：")]),_._v(" "),a("blockquote",[a("p",[_._v("当一个结点满时，分配一个新的结点，并将原结点中 1/2 的数据复制到新结点，最后在父结点中增加新结点的指针；B+树的分裂只影响原结点和父结点，而不会影响兄弟结点，所以它不需要指向兄弟的指针；")])]),_._v(" "),a("p",[a("code",[_._v("B*")]),_._v("树的分裂：")]),_._v(" "),a("blockquote",[a("p",[_._v("当一个结点满时，如果它的下一个兄弟结点未满，那么将一部分数据移到兄弟结点中，再在原结点插入关键字，最后修改父结点中兄弟结点的关键字（因为兄弟结点的关键字范围改变了）；如果兄弟也满了，则在原结点与兄弟结点之间增加新结点，并各复制 1/3 的数据到新结点，最后在父结点增加新结点的指针；")])]),_._v(" "),a("p",[_._v("所以，B*树分配新结点的概率比 B+树要低，"),a("strong",[_._v("空间使用率更高")]),_._v("；")]),_._v(" "),a("h1",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[_._v("#")]),_._v(" 参考资料")]),_._v(" "),a("ol",[a("li",[a("a",{attrs:{href:"https://blog.csdn.net/u013411246/article/details/81088914",target:"_blank",rel:"noopener noreferrer"}},[_._v("B 树、B-树、B+树、B*树之间的关系"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/Mr-YangCheng/ForAndroidInterview/blob/master/data%20structure/%5B%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%5D%20B(B-)%E6%A0%91%E3%80%81B%2B%E6%A0%91%E3%80%81B%E6%A0%91.md",target:"_blank",rel:"noopener noreferrer"}},[a("strong",[_._v("[数据结构] B(B-)树、B+树、B 树.md")]),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/bit_clearoff/article/details/53197436",target:"_blank",rel:"noopener noreferrer"}},[_._v("浅析三种多路搜索树"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/login_sonata/article/details/75268075",target:"_blank",rel:"noopener noreferrer"}},[_._v("b 树和 b+树的区别"),a("OutboundLink")],1)]),_._v(" "),a("li",[a("a",{attrs:{href:"https://segmentfault.com/a/1190000020416577",target:"_blank",rel:"noopener noreferrer"}},[_._v("面试官问你 B 树和 B+树，就把这篇文章丢给他"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);