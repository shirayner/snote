(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{1272:function(s,t,a){"use strict";a.r(t);var n=a(4),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p"),n("div",{staticClass:"table-of-contents"},[n("ul",[n("li",[n("a",{attrs:{href:"#一、volatile"}},[s._v("一、volatile")])]),n("li",[n("a",{attrs:{href:"#二、synchronized"}},[s._v("二、Synchronized")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-synchronized-的用法"}},[s._v("1. Synchronized 的用法")])]),n("li",[n("a",{attrs:{href:"#_2-synchronized-的底层原理"}},[s._v("2. Synchronized 的底层原理")])]),n("li",[n("a",{attrs:{href:"#_3-对象头结构"}},[s._v("3.对象头结构")])]),n("li",[n("a",{attrs:{href:"#_4-锁升级"}},[s._v("4.锁升级")])])])]),n("li",[n("a",{attrs:{href:"#二、synchronized"}},[s._v("二、synchronized")]),n("ul",[n("li",[n("a",{attrs:{href:"#_1-同步原理"}},[s._v("1.同步原理")])])])]),n("li",[n("a",{attrs:{href:"#_2-锁升级过程"}},[s._v("2.锁升级过程")]),n("ul",[n("li",[n("a",{attrs:{href:"#_3-锁存储"}},[s._v("3.锁存储")])])])]),n("li",[n("a",{attrs:{href:"#参考资料"}},[s._v("参考资料")])])])]),n("p"),s._v(" "),n("p",[s._v("[toc]")]),s._v(" "),n("h2",{attrs:{id:"一、volatile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、volatile"}},[s._v("#")]),s._v(" 一、volatile")]),s._v(" "),n("p",[s._v("volatile 是轻量级的 synchronized，它保证了共享变量的 “可见性”")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("可见性：当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值")]),s._v(" "),n("li",[s._v("轻量：如果 volatile 变量修饰符使用恰当的话，它比 synchronized 的使用和执行成本更低，因为它不会引起线程上下文的切换和调度")])])]),s._v(" "),n("p",[s._v("Java 代码：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[s._v("instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Singleton")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// instance是volatile变量")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("转变成汇编代码，如下：")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x01a3de1d")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" movb $"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("×"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("×"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("1104800")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("esi"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0x01a3de24")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" lock addl $"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("×"),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v("esp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("volatile 修饰的共享变量进行写操作时会多出第二行汇编代码，通过查 IA-32 架构软件开发者手册可知，Lock 前缀的指令在多核处理器下会引发了两件事：")]),s._v(" "),n("blockquote",[n("p",[s._v("（1）"),n("strong",[s._v("将当前处理器缓存行的数据写回到系统内存")]),s._v("。")]),s._v(" "),n("p",[s._v("（2）"),n("strong",[s._v("这个写回内存的操作会使在其他 CPU 里缓存了该内存地址的数据无效")]),s._v("。")])]),s._v(" "),n("p",[s._v("为了提高处理速度，处理器不直接和内存进行通信，而是先将系统内存的数据读到内部缓存（L1，L2 或其他）后再进行操作，但操作完不知道何时会写到内存。"),n("strong",[s._v("如果对声明了 volatile 的变量进行写操作，JVM 就会向处理器发送一条 Lock 前缀的指令，将这个变量所在缓存行的数据写回到系统内存")]),s._v("。但是，就算写回到内存，如果其他处理器缓存的值还是旧的，再执行计算操作就会有问题。所以，"),n("strong",[s._v("在多处理器下，为了保证各个处理器的缓存是一致的，就会实现缓存一致性协议，每个处理器通过嗅探在总线上传播的数据来检查自己缓存的值是不是过期了，当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置成无效状态，当处理器对这个数据进行修改操作的时候，会重新从系统内存中把数据读到处理器缓存里")]),s._v("。 （可参见： Javan 内存模型定义的 8 种内存间交互操作）")]),s._v(" "),n("h2",{attrs:{id:"二、synchronized"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、synchronized"}},[s._v("#")]),s._v(" 二、Synchronized")]),s._v(" "),n("blockquote",[n("p",[s._v("参见："),n("a",{attrs:{href:"https://www.jianshu.com/p/e62fa839aa41",target:"_blank",rel:"noopener noreferrer"}},[s._v("啃碎并发（七）：深入分析 Synchronized 原理"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("在 JDK1.5 之前 synchronized 是一个重量级锁，但是，随着 Java SE 1.6 对 synchronized 进行了各种优化之后，有些情况下它就并不那么重了")]),s._v(" "),n("h3",{attrs:{id:"_1-synchronized-的用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-synchronized-的用法"}},[s._v("#")]),s._v(" 1. Synchronized 的用法")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("对于静态同步方法，锁是当前类的 Class 对象。")]),s._v(" "),n("li",[s._v("对于普通同步方法，锁是当前实例对象。")]),s._v(" "),n("li",[s._v("对于同步方法块，锁是 Synchonized 括号里配置的对象。")])])]),s._v(" "),n("h3",{attrs:{id:"_2-synchronized-的底层原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-synchronized-的底层原理"}},[s._v("#")]),s._v(" 2. Synchronized 的底层原理")]),s._v(" "),n("h4",{attrs:{id:"_2-1-同步代码块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-同步代码块"}},[s._v("#")]),s._v(" 2.1 同步代码块")]),s._v(" "),n("p",[s._v("访问同步代码块时，synchronized 会被编译为 "),n("code",[s._v("monitorenter")]),s._v(" 、 "),n("code",[s._v("monitorexit")]),s._v(" 指令")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("paddx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("concurrent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedDemo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Method 1 start"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[n("img",{attrs:{src:a(449),alt:"img"}})]),s._v(" "),n("blockquote",[n("p",[s._v("monitorenter 指令是在编译后插入到同步代码块的开始位置，而 monitorexit 是插入到方法结束处和异常处，JVM 要保证每个 monitorenter 必须有对应的 monitorexit 与之配对。任何对象都有一个 monitor 与之关联，当一个 monitor 被持有后，它将处于锁定状态。线程执行到 monitorenter 指令时，将会尝试获取对象所对应的 monitor 的所有权，即尝试获得对象的锁。")])]),s._v(" "),n("h4",{attrs:{id:"_2-2-同步方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-同步方法"}},[s._v("#")]),s._v(" 2.2 同步方法")]),s._v(" "),n("p",[s._v("访问同步方法时， synchronized 会被翻译成 "),n("strong",[s._v("ACC_SYNCHRONIZED")]),s._v(" 标志")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("paddx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("concurrent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedMethod")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("img",{attrs:{src:a(446),alt:"img"}})]),s._v(" "),n("blockquote",[n("p",[s._v("当方法调用时，"),n("strong",[s._v("调用指令将会检查方法的 ACC_SYNCHRONIZED 访问标志是否被设置")]),s._v("，如果设置了，"),n("strong",[s._v("执行线程将先获取 monitor")]),s._v("，获取成功之后才能执行方法体，"),n("strong",[s._v("方法执行完后再释放 monitor")]),s._v("。在方法执行期间，其他任何线程都无法再获得同一个 monitor 对象。")])]),s._v(" "),n("p",[s._v("两种同步方式本质上没有区别，只是方法的同步是一种隐式的方式来实现，无需通过字节码来完成。"),n("strong",[s._v("两个指令的执行是 JVM 通过调用操作系统的互斥原语 mutex 来实现，被阻塞的线程会被挂起、等待重新调度")]),s._v("，会导致“用户态和内核态”两个态之间来回切换，对性能有较大影响。")]),s._v(" "),n("h3",{attrs:{id:"_3-对象头结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-对象头结构"}},[s._v("#")]),s._v(" 3.对象头结构")]),s._v(" "),n("h3",{attrs:{id:"_4-锁升级"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-锁升级"}},[s._v("#")]),s._v(" 4.锁升级")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("Java SE 1.6 为了减少获得锁和释放锁带来的性能消耗，对 synchronized 进行优化，引入了“偏向锁”和“轻量级锁”。")])]),s._v(" "),n("li",[n("p",[s._v("在 Java SE 1.6 中，锁一共有 4 种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态。")])]),s._v(" "),n("li",[n("p",[s._v("锁可以升级，但不能降级：")]),s._v(" "),n("blockquote",[n("p",[s._v("（1）最开始，监视器锁为无锁状态")]),s._v(" "),n("p",[s._v("（2）此时线程 A 进入，监视器锁升级为偏向锁（当只有一个线程时，为偏向锁）")]),s._v(" "),n("p",[s._v("（3）接着线程 B 过来竞争锁，偏向锁升级为轻量级锁状态（再来一个线程就升级为偏向锁）")]),s._v(" "),n("p",[s._v("（4）然后当线程 B 自旋次数达到 10 次，线程 B 就会挂起，进入阻塞状态，此时轻量级锁升级为重量级锁（自旋次数达到阈值，就会升级为重量级锁）")])])])]),s._v(" "),n("h4",{attrs:{id:"_4-1-偏向锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-偏向锁"}},[s._v("#")]),s._v(" 4.1 偏向锁")]),s._v(" "),n("blockquote",[n("p",[s._v("适用于只有一个线程访问同步块")])]),s._v(" "),n("p",[s._v("HotSpot 的作者经过研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一线程多次获得，为了让线程获得锁的代价更低而引入了偏向锁。")]),s._v(" "),n("p",[s._v("（1）获取锁")]),s._v(" "),n("p",[s._v("最开始监视器锁为无锁状态，此时一个线程 A 来访问同步块时，首先会测试 "),n("strong",[s._v("锁对象头的 Mark Word 里是否存储着当前线程 ID")])]),s._v(" "),n("ul",[n("li",[s._v("如果测试成功，表示线程 A 已经获得了锁")]),s._v(" "),n("li",[s._v("如果测试失败，则需要再测试 "),n("strong",[s._v("Mark Word 中偏向锁的标识是否设置成 1")]),s._v("（表示当前是偏向锁）\n"),n("ul",[n("li",[s._v("如果为 0 ，表示无锁状态，则使用 CAS 在 "),n("strong",[s._v("对象头的 MarkWord")]),s._v(" 和 "),n("strong",[s._v("栈帧中的锁记录（Lock Record）")]),s._v(" 里存储当前线程 ID，存储成功即代表成功获取锁")]),s._v(" "),n("li",[s._v("如果为 1，表示已经有线程 B 获取了偏向锁，此时测试获取了偏向锁的线程是否还在执行任务\n"),n("ul",[n("li",[s._v("若是，表示发生竞争，锁升级为轻量级锁")]),s._v(" "),n("li",[s._v("若否，则使用 CAS 在修改"),n("strong",[s._v("对象头的 MarkWord")]),s._v(" 和 "),n("strong",[s._v("栈帧中的锁记录（Lock Record）")]),s._v(" 里的线程 ID 为当前线程 ID")])])])])])]),s._v(" "),n("p",[s._v("（2）释放锁")]),s._v(" "),n("blockquote",[n("ul",[n("li",[s._v("栈帧中的锁记录：存储线程 ID")]),s._v(" "),n("li",[s._v("对象头的 MarkWord：存储线程 ID")])])]),s._v(" "),n("h4",{attrs:{id:"_4-2-轻量级锁"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-轻量级锁"}},[s._v("#")]),s._v(" 4.2 轻量级锁")]),s._v(" "),n("p",[s._v("加锁：")]),s._v(" "),n("blockquote",[n("p",[s._v("（1）创建栈帧中锁记录（Displaced Mark Word）空间")]),s._v(" "),n("p",[s._v("（2）将对象头 MarkWord 复制到锁记录")]),s._v(" "),n("p",[s._v("（3）线程 CAS 将对象头的 MarkWord 替换为指向锁记录的指针")])]),s._v(" "),n("h4",{attrs:{id:"_4-3-锁的优缺点对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-锁的优缺点对比"}},[s._v("#")]),s._v(" 4.3 锁的优缺点对比")]),s._v(" "),n("h2",{attrs:{id:"二、synchronized-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、synchronized-2"}},[s._v("#")]),s._v(" 二、synchronized")]),s._v(" "),n("p",[s._v("synchronized 作用于实例方法时，是锁对象")]),s._v(" "),n("p",[s._v("synchronized 作用于静态方法时，是锁 Class")]),s._v(" "),n("h3",{attrs:{id:"_1-同步原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-同步原理"}},[s._v("#")]),s._v(" 1.同步原理")]),s._v(" "),n("p",[s._v("（1）访问同步代码块时，synchronized 会被编译为 "),n("strong",[s._v("monitorenter")]),s._v(" 、 "),n("strong",[s._v("monitorexit")]),s._v(" 指令")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("paddx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("concurrent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedDemo")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n       "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n           "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Method 1 start"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n       "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n   "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("（2）访问同步方法时， synchronized 会被翻译成 "),n("strong",[s._v("ACC_SYNCHRONIZED")]),s._v(" 标志")]),s._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("package")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("paddx"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("concurrent")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SynchronizedMethod")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("synchronized")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("method")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[n("img",{attrs:{src:a(446),alt:"img"}})]),s._v(" "),n("h2",{attrs:{id:"_2-锁升级过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-锁升级过程"}},[s._v("#")]),s._v(" 2.锁升级过程")]),s._v(" "),n("p",[s._v("最开始锁时无锁状态，这时一个线程进入同步块，将其线程 ID 写入锁对象头，升级为偏向锁。")]),s._v(" "),n("p",[s._v("偏向锁时，只要一有竞争，就会升级为轻量级锁。也就是说只要这时有另一个线程尝试进入同步块，就会升级为轻量级锁。")]),s._v(" "),n("p",[s._v("轻量级锁时，如果一个线程自旋次数达到阈值（默认 10 次），线程就会挂起，也就升级为重量级锁。")]),s._v(" "),n("h3",{attrs:{id:"_3-锁存储"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-锁存储"}},[s._v("#")]),s._v(" 3.锁存储")]),s._v(" "),n("p",[s._v("偏向锁:")]),s._v(" "),n("blockquote",[n("ul",[n("li",[n("p",[s._v("栈帧中的锁记录：存储线程 ID")])]),s._v(" "),n("li",[n("p",[s._v("对象头的 MarkWord：存储线程 ID")])])])]),s._v(" "),n("p",[s._v("轻量级锁：")]),s._v(" "),n("p",[s._v("加锁：")]),s._v(" "),n("blockquote",[n("p",[s._v("（1）创建栈帧中锁记录（Displaced Mark Word）空间")]),s._v(" "),n("p",[s._v("（2）将对象头 MarkWord 复制到锁记录")]),s._v(" "),n("p",[s._v("（3）线程 CAS 将对象头的 MarkWord 替换为指向锁记录的指针")])]),s._v(" "),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),n("blockquote",[n("ul",[n("li",[n("a",{attrs:{href:"https://www.jianshu.com/p/e62fa839aa41",target:"_blank",rel:"noopener noreferrer"}},[s._v("啃碎并发（七）：深入分析 Synchronized 原理"),n("OutboundLink")],1)])])])])}),[],!1,null,null,null);t.default=r.exports},446:function(s,t,a){s.exports=a.p+"assets/img/2062729-8b7734120fae6645.d47c21ef.png"},449:function(s,t,a){s.exports=a.p+"assets/img/2062729-b98084591219da8c.f58f58f9.png"}}]);